# HG changeset patch
# User robertm@google.com
# Date 1309182198 14400
# Branch pnacl-sfi
# Node ID 8713c8955201ed075f41833a16b4215a968550c5
# Parent 8f74237c6b9634fd0329d2bd985035e594776c85
Reduce our delta to vendor a little bit and help with the merge.

As interesting side note: our stage1 step still builds
a libgcc.a which is never used.
I could not figure out how to turn this off but it might save us another 30 sec on the build

CL= http://codereview.chromium.org/7193015/

 From pnacl-llvm-gcc-0010-82-8713c8955201ed075f41833a16b4215a968550c5.patch

diff -r 8f74237c6b96 llvm-gcc-4.2/gcc/Makefile.in
--- a/llvm-gcc-4.2/gcc/Makefile.in	Thu Jun 23 09:47:51 2011 -0700
+++ b/llvm-gcc-4.2/gcc/Makefile.in	Thu Jul 07 10:50:22 2011 -0700
@@ -605,7 +605,7 @@
 
 # libgcc.a may be built directly or via stmp-multilib,
 # and installed likewise.  Overridden by t-fragment.
-LIBGCC = libgcc.a
+LIBGCC = libgcc.a  
 INSTALL_LIBGCC = install-libgcc
 
 # "true" if the target C library headers are unavailable; "false"
@@ -1684,7 +1684,7 @@
 #
 # Build libgcc.a.
 
-LIB2ADD = $(LIB2FUNCS_EXTRA) $(srcdir)/libgcc-memcpy.c
+LIB2ADD = $(LIB2FUNCS_EXTRA)
 LIB2ADD_ST = $(LIB2FUNCS_STATIC_EXTRA)
 
 # LLVM LOCAL begin libcc_kext
diff -r 8f74237c6b96 llvm-gcc-4.2/gcc/config/arm/bpabi.S
--- a/llvm-gcc-4.2/gcc/config/arm/bpabi.S	Thu Jun 23 09:47:51 2011 -0700
+++ b/llvm-gcc-4.2/gcc/config/arm/bpabi.S	Thu Jul 07 10:50:22 2011 -0700
@@ -81,7 +81,7 @@
 #ifdef L_aeabi_ldivmod
 
 ARM_FUNC_START aeabi_ldivmod
-	sfi_sub sp, sp, #8
+	sub sp, sp, #8
 /* APPLE LOCAL begin v7 support. Merge from mainline */
 #if defined(__thumb2__)
 	mov ip, sp
@@ -89,10 +89,9 @@
 #else
 	do_push {sp, lr}
 #endif
-	sfi_call_preamble
 	bl SYM(__gnu_ldivmod_helper) __PLT__
 	ldr lr, [sp, #4]
-	sfi_add sp, sp, #8
+	add sp, sp, #8
 	do_pop {r2, r3}
 /* APPLE LOCAL end v7 support. Merge from mainline */
 	RET
@@ -102,7 +101,7 @@
 #ifdef L_aeabi_uldivmod
 
 ARM_FUNC_START aeabi_uldivmod
-	sfi_sub sp, sp, #8
+	sub sp, sp, #8
 /* APPLE LOCAL begin v7 support. Merge from mainline */
 #if defined(__thumb2__)
 	mov ip, sp
@@ -110,10 +109,9 @@
 #else
 	do_push {sp, lr}
 #endif
-	sfi_call_preamble
 	bl SYM(__gnu_uldivmod_helper) __PLT__
 	ldr lr, [sp, #4]
-	sfi_add sp, sp, #8
+	add sp, sp, #8
 	do_pop {r2, r3}
 /* APPLE LOCAL end v7 support. Merge from mainline */
 	RET
diff -r 8f74237c6b96 llvm-gcc-4.2/gcc/config/arm/lib1funcs.asm
--- a/llvm-gcc-4.2/gcc/config/arm/lib1funcs.asm	Thu Jun 23 09:47:51 2011 -0700
+++ b/llvm-gcc-4.2/gcc/config/arm/lib1funcs.asm	Thu Jul 07 10:50:22 2011 -0700
@@ -32,9 +32,6 @@
 
 /* We need to know what prefix to add to function names.  */
 
-/* @LOCALMOD: This must be the first thing in the file */
-#include "naclmacros.asm"
-
 #ifndef __USER_LABEL_PREFIX__
 #error  __USER_LABEL_PREFIX__ not defined
 #endif
@@ -100,8 +97,8 @@
 
 #if (__ARM_ARCH__ > 4) || defined(__ARM_ARCH_4T__)
 
-# define RET		sfi_bx	lr
-# define RETc(x)	sfi_bx##x	lr
+# define RET		bx	lr
+# define RETc(x)	bx##x	lr
 
 /* Special precautions for interworking on armv4t.  */
 # if (__ARM_ARCH__ == 4)
@@ -119,7 +116,7 @@
 #endif /* __ARM_ARCH == 4 */
 
 #else
-/* LOCALMOD we do not support ARCH 4 in NaCl, no changes here. */
+
 # define RET		mov	pc, lr
 # define RETc(x)	mov##x	pc, lr
 
@@ -213,28 +210,22 @@
 	bx	lr
 #else
 #define RETLDM \
-	ldr     lr, [sp], #8 ; \
-        sfi_bx  lr
+	ldr     pc, [sp], #8
 /* APPLE LOCAL begin v7 support. Merge from mainline */
 #if defined (__thumb2__)
 #define RETLDM1(...) \
-	pop   {__VA_ARGS__, lr} ; \
-        sfi_bx lr
+	pop   {__VA_ARGS__, pc}
 #define RETLDM2(cond,...) \
-	pop##cond   {__VA_ARGS__, lr} ; \
-        sfi_bx lr
+	pop##cond   {__VA_ARGS__, pc}
 #else
 #define RETLDM1(...) \
-	ldmia   sp!, {__VA_ARGS__, lr} ; \
-        sfi_bx lr
+	ldmia   sp!, {__VA_ARGS__, pc}
 #define RETLDM2(cond,...) \
-	ldm##cond##ia   sp!, {__VA_ARGS__, lr} ; \
-        sfi_bx lr
+	ldm##cond##ia   sp!, {__VA_ARGS__, pc}
 #endif
 /* APPLE LOCAL end v7 support. Merge from mainline */
 #define RETLDM_unwind(addr) \
-	ldr	lr, [sp], #8 ; \
-        sfi_bx lr
+	ldr	pc, [sp], #8
 #endif
 
 /* APPLE LOCAL begin v7 support. Merge from mainline */
@@ -301,7 +292,6 @@
 #if !defined(__MACH__)
 98:	cfi_push 98b - __\name, 0xe, -0x8, 0x8
 #endif
-  sfi_call_preamble
 	bl	SYM (__div0) __PLT__
 	mov	r0, #0			@ About as wrong as it could be.
 	RETLDM_unwind (8b)
@@ -313,15 +303,13 @@
 #if !defined(__MACH__)
 7:	cfi_push 7b - __\name, 0xe, -0x4, 0x8
 #endif
-  sfi_call_preamble
 	bl	SYM (__div0)
 	mov	r0, #0			@ About as wrong as it could be.
 #if defined (__INTERWORKING__)
 	pop	{ r1, r2 }
 	bx	r2
 #else
-	pop	{ r1, lr }
-  sfi_bx lr
+	pop	{ r1, pc }
 #endif
 .endm
 
@@ -384,7 +372,7 @@
 #define THUMB_FUNC
 #define THUMB_CODE
 /* APPLE LOCAL ARM function alignment */
-#define FUNC_ALIGN .align 4
+#define FUNC_ALIGN .align 2
 /* APPLE LOCAL v7 support. Merge from mainline */
 #define THUMB_SYNTAX
 #endif
@@ -403,7 +391,7 @@
 	.text
 	.globl SYM (__\name)
 	TYPE (__\name)
-	.align 4
+	.align 0
 	THUMB_CODE
 	THUMB_FUNC
 SYM (__\name):
@@ -430,7 +418,6 @@
 #if defined(__MACH__)
   bl ___$0
 #else
-  sfi_call_preamble
   bl  ___\name
 #endif
 .endm
@@ -484,7 +471,7 @@
 	.text
 	.globl SYM (__\name)
 	TYPE (__\name)
-	.align 4
+	.align 0
 	.arm
 SYM (__\name):
 #endif
@@ -494,7 +481,6 @@
 #if defined(__MACH__)
 	bl	SYM (__$0)
 #else
-  sfi_call_preamble
 	bl	__\name
 #endif
 .endm
@@ -548,18 +534,16 @@
 	.set	shift, shift - 1				; \
 	cmp	dividend, divisor, lsl #shift			; \
 	adc	result, result, result				; \
-	subcs	dividend, dividend, divisor, lsl #shift  ; \
-  nop
+	subcs	dividend, dividend, divisor, lsl #shift
 #define ARM_DIV_BODY(dividend, divisor, result, curbit)	  	  \
 	clz	curbit, dividend				; \
 	clz	result, divisor					; \
 	sub	curbit, result, curbit				; \
 	rsbs	curbit, curbit, #31				; \
+	addne	curbit, curbit, curbit, lsl #1			; \
 	mov	result, #0					; \
-  sfi_new_bundle                ; \
-  add curbit, pc, curbit, lsl #4  ; \
-  add curbit, curbit, #8  ; \
-  sfi_bxne curbit         ; \
+	addne	pc, pc, curbit, lsl #2				; \
+	nop							; \
 	.set	shift, 32					; \
 	ARMV5_DIV_LOOP (dividend, divisor, result)		; \
 	ARMV5_DIV_LOOP (dividend, divisor, result)		; \
@@ -687,18 +671,14 @@
 #define ARMV5_MOD_LOOP(dividend, divisor)			  \
 	.set	shift, shift - 1				; \
 	cmp	dividend, divisor, lsl #shift			; \
-	subcs	dividend, dividend, divisor, lsl #shift ; \
-  nop ; \
-  nop
+	subcs	dividend, dividend, divisor, lsl #shift
 #define ARM_MOD_BODY(dividend, divisor, order, spare)	 	  \
 	clz	order, divisor					; \
 	clz	spare, dividend					; \
 	sub	order, order, spare				; \
 	rsbs	order, order, #31				; \
-  sfi_new_bundle                ; \
-  add spare, pc, order, lsl #4  ; \
-  add spare, spare, #8          ; \
-  sfi_bxne spare                ; \
+	addne	pc, pc, order, lsl #3				; \
+	nop							; \
 	.set	shift, 32					; \
 	ARMV5_MOD_LOOP (dividend, divisor)			; \
 	ARMV5_MOD_LOOP (dividend, divisor)			; \
@@ -1034,7 +1014,6 @@
 	bx	r3
 #else
 	stmfd	sp!, { r0, r1, lr }
-  sfi_call_preamble
 	bl	SYM(__udivsi3)
 	ldmfd	sp!, { r1, r2, lr }
 	mul	r3, r2, r0
@@ -1186,7 +1165,6 @@
 	bx	r3
 #else
 	stmfd	sp!, { r0, r1, lr }
-  sfi_call_preamble
 	bl	SYM(__divsi3)
 	ldmfd	sp!, { r1, r2, lr }
 	mul	r3, r2, r0
@@ -1288,12 +1266,8 @@
 
 	/* LLVM LOCAL mainline */
 	do_push	{r1, lr}
-#ifdef __native_client__
-	NACL_HALT
-#else
-	mov     r0, #SIGFPE
-	bl      SYM(raise) __PLT__
-#endif
+	mov	r0, #SIGFPE
+	bl	SYM(raise) __PLT__
 	/* APPLE LOCAL ARM MACH assembler */
 	RETLDM1 (r1)
 
@@ -1536,7 +1510,6 @@
 		
 /* Do not build the interworking functions when the target architecture does 
    not support Thumb instructions.  (This can be a multilib option).  */
-#if defined(__thumb__)
 #if defined __ARM_ARCH_4T__ || defined __ARM_ARCH_5T__\
       || defined __ARM_ARCH_5TE__ || defined __ARM_ARCH_5TEJ__ \
       || __ARM_ARCH__ >= 6
@@ -1715,7 +1688,6 @@
 /* APPLE LOCAL v7 support. Merge from mainline */
 #endif /* !__thumb2__ */
 #endif /* Arch supports thumb.  */
-#endif /* Thumb is enabled */
 
 #ifndef __symbian__
 #include "ieee754-df.S"
diff -r 8f74237c6b96 llvm-gcc-4.2/gcc/config/arm/naclmacros.asm
--- a/llvm-gcc-4.2/gcc/config/arm/naclmacros.asm	Thu Jun 23 09:47:51 2011 -0700
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,392 +0,0 @@
-@LOCALMOD_START - NativeClient SFI macros
-  .macro sfi_long_based_on_pos p0 p1 p2 p3 val
-	.set pos, (. - XmagicX) % 16
-	.fill  (((\p3<<12)|(\p2<<8)|(\p1<<4)|\p0)>>pos) & 15, 4, \val
-	.endm
-
-
-  .macro sfi_new_bundle
-  .align 4
-  .endm
-
-	.macro sfi_illegal_if_at_bundle_begining
-	sfi_long_based_on_pos 1 0 0 0 0xe1277777
-	.endm
-
-
-	.macro sfi_nop_if_at_bundle_end
-	sfi_long_based_on_pos 0 0 0 1 0xe1a00000
-	.endm
-
-
-	.macro sfi_nops_to_force_slot3
-	sfi_long_based_on_pos 3 2 1 0 0xe1a00000
-	.endm
-
-
-	.macro sfi_nops_to_force_slot2
-	sfi_long_based_on_pos 2 1 0 3 0xe1a00000
-	.endm
-
-
-	.macro sfi_nops_to_force_slot1
-	sfi_long_based_on_pos 1 0 3 2 0xe1a00000
-	.endm
-
-
- @ ========================================
-	.macro sfi_data_mask reg cond
-	bic\cond \reg, \reg, #0xc0000000
-	.endm
-
-
-	.macro sfi_code_mask reg cond=
-	bic\cond \reg, \reg, #0xc000000f
-	.endm
-
-
- @ ========================================
-	.macro sfi_call_preamble
-	sfi_nops_to_force_slot3
-	.endm
-
-
-	.macro sfi_return_alignment_and_code_mask reg cond=
-	sfi_nop_if_at_bundle_end
-	sfi_code_mask \reg \cond
-	.endm
-
-
- @ ========================================
-	.macro sfi_store_preamble reg cond
-	.if \reg != sp
-	sfi_nop_if_at_bundle_end
-	sfi_data_mask \reg, \cond
-	.endif
-	.endm
-
-
- @ ========================================
-	.macro sfi_add rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	add \rega, \regb, \imm, \rot
-	sfi_data_mask \rega
-	.endm
-
-
-	.macro sfi_addeq rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	addeq \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, eq
-	.endm
-
-
-	.macro sfi_addne rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	addne \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, ne
-	.endm
-
-
-	.macro sfi_addlt rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	addlt \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, lt
-	.endm
-
-
-	.macro sfi_addle rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	addle \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, le
-	.endm
-
-
-	.macro sfi_addls rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	addls \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, ls
-	.endm
-
-
-	.macro sfi_addge rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	addge \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, ge
-	.endm
-
-
-	.macro sfi_addgt rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	addgt \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, gt
-	.endm
-
-
-	.macro sfi_addhs rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	addhs \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, hs
-	.endm
-
-
-	.macro sfi_addhi rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	addhi \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, hi
-	.endm
-
-
-	.macro sfi_addlo rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	addlo \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, lo
-	.endm
-
-
- @ ========================================
-	.macro sfi_sub rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	sub \rega, \regb, \imm, \rot
-	sfi_data_mask \rega
-	.endm
-
-
-	.macro sfi_subeq rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	subeq \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, eq
-	.endm
-
-
-	.macro sfi_subne rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	subne \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, ne
-	.endm
-
-
-	.macro sfi_sublt rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	sublt \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, lt
-	.endm
-
-
-	.macro sfi_suble rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	suble \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, le
-	.endm
-
-
-	.macro sfi_subls rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	subls \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, ls
-	.endm
-
-
-	.macro sfi_subge rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	subge \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, ge
-	.endm
-
-
-	.macro sfi_subgt rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	subgt \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, gt
-	.endm
-
-
-	.macro sfi_subhs rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	subhs \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, hs
-	.endm
-
-
-	.macro sfi_subhi rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	subhi \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, hi
-	.endm
-
-
-	.macro sfi_sublo rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	sublo \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, lo
-	.endm
-
-
- @ ========================================
-	.macro sfi_mov rega regb
-	sfi_nop_if_at_bundle_end
-	mov \rega, \regb
-	sfi_data_mask \rega
-	.endm
-
-
-	.macro mov_subeq rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	moveq \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, eq
-	.endm
-
-
-	.macro mov_subne rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	movne \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, ne
-	.endm
-
-
-	.macro mov_sublt rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	movlt \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, lt
-	.endm
-
-
-	.macro mov_suble rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	movle \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, le
-	.endm
-
-
-	.macro mov_subls rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	movls \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, ls
-	.endm
-
-
-	.macro mov_subge rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	movge \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, ge
-	.endm
-
-
-	.macro mov_subgt rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	movgt \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, gt
-	.endm
-
-
-	.macro mov_subhs rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	movhs \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, hs
-	.endm
-
-
-	.macro mov_subhi rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	movhi \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, hi
-	.endm
-
-
-	.macro mov_sublo rega regb imm rot=0
-	sfi_nop_if_at_bundle_end
-	movlo \rega, \regb, \imm, \rot
-	sfi_data_mask \rega, lo
-	.endm
-
-
- @ ========================================
-	.macro sfi_bx link
-	sfi_return_alignment_and_code_mask \link
-	bx \link
-	.endm
-
-
-	.macro sfi_bxeq link
-	sfi_return_alignment_and_code_mask \link eq
-	bxeq \link
-	.endm
-
-
-	.macro sfi_bxne link
-	sfi_return_alignment_and_code_mask \link ne
-	bxne \link
-	.endm
-
-
-	.macro sfi_bxlt link
-	sfi_return_alignment_and_code_mask \link lt
-	bxlt \link
-	.endm
-
-
-	.macro sfi_bxle link
-	sfi_return_alignment_and_code_mask \link le
-	bxle \link
-	.endm
-
-
-	.macro sfi_bxls link
-	sfi_return_alignment_and_code_mask \link ls
-	bxls \link
-	.endm
-
-
-	.macro sfi_bxge link
-	sfi_return_alignment_and_code_mask \link ge
-	bxge \link
-	.endm
-
-
-	.macro sfi_bxgt link
-	sfi_return_alignment_and_code_mask \link gt
-	bxgt \link
-	.endm
-
-
-	.macro sfi_bxhs link
-	sfi_return_alignment_and_code_mask \link hs
-	bxhs \link
-	.endm
-
-
-	.macro sfi_bxhi link
-	sfi_return_alignment_and_code_mask \link hi
-	bxhi \link
-	.endm
-
-
-	.macro sfi_bxlo link
-	sfi_return_alignment_and_code_mask \link lo
-	bxlo \link
-	.endm
-
-	.macro sfi_bxcc link
-	sfi_return_alignment_and_code_mask \link lo
-	bxcc \link
-	.endm
-
-
- @ ========================================
-	.macro sfi_indirect_jump_preamble link
-	sfi_nop_if_at_bundle_end
-	sfi_code_mask \link
-	.endm
-
-
-	.macro sfi_indirect_call_preamble link
-	sfi_nops_to_force_slot2
-	sfi_code_mask \link
-  .endm
-@LOCALMOD_END
-
-.align 4
-XmagicX:
-
-#define NACL_HALT         bkpt 0x6666
-
diff -r 8f74237c6b96 llvm-gcc-4.2/gcc/libgcc-memcpy.c
--- a/llvm-gcc-4.2/gcc/libgcc-memcpy.c	Thu Jun 23 09:47:51 2011 -0700
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,40 +0,0 @@
-/* memcpy copy for libgcc.  */
-/* Copyright (C) 2010 Free Software Foundation, Inc.
-
-This file is part of GCC.
-
-GCC is free software; you can redistribute it and/or modify it under
-the terms of the GNU General Public License as published by the Free
-Software Foundation; either version 2, or (at your option) any later
-version.
-
-In addition to the permissions in the GNU General Public License, the
-Free Software Foundation gives you unlimited permission to link the
-compiled version of this file into combinations with other programs,
-and to distribute those combinations without any restriction coming
-from the use of this file.  (The General Public License restrictions
-do apply in other respects; for example, they cover modification of
-the file, and distribution when not linked into a combine
-executable.)
-
-GCC is distributed in the hope that it will be useful, but WITHOUT ANY
-WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with GCC; see the file COPYING.  If not, write to the Free
-Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA
-02110-1301, USA.  */
-
-#include <stddef.h>
-
-void *
-memcpy(void *dest, const void *src, size_t n)
-{
-  char *destp = dest;
-  const char *srcp = src;
-  while (n--)
-    *destp++ = *srcp++;
-  return dest;
-}
