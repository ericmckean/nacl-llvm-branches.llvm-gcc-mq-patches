# HG changeset patch
# User robertm@google.com
# Date 1309467198 14400
# Branch pnacl-sfi
# Node ID 4143147bce3bcc5f13e84d34a976b37b516dad0a
# Parent aab31e2d87fe959c62e5fb7e2a48108e8de27400
This LOCALMOD is not needed anymore since we switched to a single frontend.
However we may need to investigate the use
_Unwind_Word private_X to see whether _Unwind_Word
is sufficiently wide. This should be exlored in the context
of the bug below:

BUG= http://code.google.com/p/nativeclient/issues/detail?id=1933

CL= http://codereview.chromium.org/7225003/

 From pnacl-llvm-gcc-0011-83-4143147bce3bcc5f13e84d34a976b37b516dad0a.patch

diff -r aab31e2d87fe gcc/unwind-generic.h
--- a/gcc/unwind-generic.h	Mon Jun 27 09:43:18 2011 -0400
+++ b/gcc/unwind-generic.h	Fri Jul 01 16:22:53 2011 -0700
@@ -92,17 +92,6 @@
   _Unwind_Word private_1;
   _Unwind_Word private_2;
 
-  // @LOCALMOD-START
-  // some extra space to help with libgcc_eh on x86-64 which thinks this
-  // structure is bigger than what the bitcode thinks and hence
-  // when private_1/private_2 are written to they might write over
-  // the end of the struct into the exception which the bitcode places
-  // immediately after it
-  // c.f. http://code.google.com/p/nativeclient/issues/detail?id=1107
-  // An array of size 4 would likely suffice - 8 plays it safe
-  int _do_not_use[8];
-  // @LOCALMOD-END
-
   /* @@@ The IA-64 ABI says that this structure must be double-word aligned.
      Taking that literally does not make much sense generically.  Instead we
      provide the maximum alignment required by any type for the machine.  */
